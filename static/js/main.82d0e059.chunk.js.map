{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/EditableSpan/EditableSpan.tsx","components/TodoListHeader/TodoListHeader.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/Task/Task.tsx","components/AddItemForm/AddItemForm.tsx","components/TodoList/TodoList.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","EditableSpan","memo","title","changeTitle","useState","newTitle","setNewTitle","editMode","setEditMode","offEditMode","TextField","id","autoFocus","value","onChange","e","currentTarget","onBlur","onKeyPress","key","size","onDoubleClick","TodoListHeader","removeTodoList","style","textAlign","IconButton","onClick","DeleteOutline","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","post","todolistId","put","delete","get","taskAPI","taskId","model","REMOVE_TODOLIST","ADD_TODOLIST","SET_TODOLISTS","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","initialState","fetchTodolistsTC","dispatch","then","res","todolists","data","type","removeTodolistTC","addTodolistTC","todolist","item","changeTodoListTitleTC","changeTodoListTitleAC","REMOVE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","SET_TASKS","fetchTasksTC","tasks","SetTasksAC","items","deleteTaskTC","removeTaskAC","addTaskTC","task","addTaskAC","changeTaskTitleTC","todoListId","getState","find","deadline","description","startDate","priority","status","changeTaskTitleAC","changeTaskStatusTC","changeTaskStatusAC","Task","useSelector","state","filter","useDispatch","onChangeHandler","useCallback","newIsDoneValue","checked","Completed","New","removeTask","ListItem","divider","className","Checkbox","color","AddItemForm","addItem","label","setTitle","error","setError","addTask","trim","charCode","Add","TodoList","tl","useEffect","setFilterValue","changeTodoListFilterAC","setTitleValue","removeTodolist","addNewTask","tasksComponents","t","getTasksForRender","map","List","ButtonGroup","fullWidth","marginTop","Button","variant","App","todoLists","addTodoList","thunk","todoListsComponents","Grid","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","padding","spacing","rootReducer","combineReducers","action","newState","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.82d0e059.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'a1038b76-ce0b-4e0f-8fa8-c2cb1917e698'\n    }\n})\n\n// ####################################\n// api\n\nexport const todolistAPI = {\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`/todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\n    },\n    getTodolists() {\n        return instance.get<Array<TodolistType>>(`/todo-lists`)\n    }\n}\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks`, {title})\n        //return instance.post<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask1(todolistId: string, taskId: string, title: string) {\n        return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n\n}\n\n\n// ####################################\n// types\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    completed: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = memo(({title, changeTitle}) => {\n    const [newTitle, setNewTitle] = useState<string>(title);\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onChangeSetUserText = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value);\n    }\n    const onEditMode = () => {\n        setEditMode(true)\n    }\n    const offEditMode = () => {\n        setEditMode(false)\n        changeTitle(newTitle)\n    }\n    const onKeyPressOffMode = (e: KeyboardEvent<HTMLInputElement>) => e.key === \"Enter\" && offEditMode()\n\n    return (\n        editMode\n            ? <TextField\n                id=\"outlined-basic\"\n                autoFocus={true}\n                value={newTitle}\n                onChange={onChangeSetUserText}\n                onBlur={offEditMode}\n                onKeyPress={onKeyPressOffMode}\n                size={\"small\"}/>\n            : <span onDoubleClick={onEditMode}>{title}</span>\n    );\n});\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\n\n","import React, {memo} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {DeleteOutline} from \"@material-ui/icons\";\nimport {IconButton} from \"@material-ui/core\";\n\nexport const TodoListHeader: React.FC<TodoListHeaderProps> = memo(({title, removeTodoList, changeTitle}) => {\n    const remove = () => removeTodoList()\n    return (\n        <h3 style={{textAlign: \"center\"}}>\n            <EditableSpan title={title} changeTitle={changeTitle}/>\n            <IconButton aria-label=\"delete\"\n                        onClick={remove}>\n                <DeleteOutline/>\n            </IconButton>\n        </h3>\n    )\n})\n\ntype TodoListHeaderProps = {\n    title: string\n    removeTodoList: () => void\n    changeTitle: (title: string) => void\n}\n\n","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\nimport {AppThunk} from \"./store\";\n\nexport const REMOVE_TODOLIST = \"REMOVE_TODOLIST\"\nexport const ADD_TODOLIST = \"ADD_TODOLIST\"\nexport const SET_TODOLISTS = \"SET_TODOLISTS\"\nconst CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\"\nconst CHANGE_TODOLIST_FILTER = \"CHANGE_TODOLIST_FILTER\"\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (todoLists = initialState, action: ActionTypeTodolist): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case REMOVE_TODOLIST:\n            return todoLists.filter(tl => tl.id !== action.id)\n        case ADD_TODOLIST:\n            return [...todoLists, {\n                ...action.todolist,\n                filter: \"all\",\n            }]\n        case CHANGE_TODOLIST_TITLE:\n            return todoLists.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case CHANGE_TODOLIST_FILTER:\n            return todoLists.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case SET_TODOLISTS:\n            return action.todolists.map(t => {\n                return {...t, filter: \"all\"}\n            })\n        default:\n            return todoLists\n    }\n}\n\n// ####################################\n// action creators\n\nexport const removeTodoListAC = (id: string) => ({\n    type: REMOVE_TODOLIST, id: id\n}) as const\n\nexport const addTodoListAC = (todolist: TodolistType) => ({\n    type: ADD_TODOLIST, todolist\n}) as const\n\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\n    type: CHANGE_TODOLIST_TITLE, id, title\n}) as const\n\nexport const changeTodoListFilterAC = (id: string, filter: FilterValueType) => ({\n    type: CHANGE_TODOLIST_FILTER, id, filter\n}) as const\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\n    type: SET_TODOLISTS, todolists\n}) as const\n\n\n// ####################################\n// thunks\n\nexport const fetchTodolistsTC = (): AppThunk => dispatch => {\n        todolistAPI.getTodolists()\n            .then(res => {\n                dispatch(setTodolistsAC(res.data))\n            })\n}\n\nexport const removeTodolistTC = (todolistId: string): AppThunk => dispatch => {\n    todolistAPI.deleteTodolist(todolistId)\n        .then(res => {\n            dispatch(removeTodoListAC(todolistId))\n        })\n}\n\nexport const addTodolistTC = (title: string): AppThunk => dispatch => {\n    todolistAPI.createTodolist(title)\n        .then(res => {\n            dispatch(addTodoListAC(res.data.data.item))\n        })\n}\n\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk => dispatch => {\n    todolistAPI.updateTodolist(id, title)\n        .then(res => {\n            dispatch(changeTodoListTitleAC(id, title))\n        })\n}\n\n// ####################################\n// types\n\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValueType\n}\nexport type RemoveTodoListAT = ReturnType<typeof removeTodoListAC>\nexport type AddTodoListAT = ReturnType<typeof addTodoListAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\n\nexport type ActionTypeTodolist =\n    | RemoveTodoListAT\n    | AddTodoListAT\n    | SetTodolistsAT\n    | ReturnType<typeof changeTodoListTitleAC>\n    | ReturnType<typeof changeTodoListFilterAC>\n\n","import {\n    ADD_TODOLIST,\n    AddTodoListAT, REMOVE_TODOLIST,\n    RemoveTodoListAT, SET_TODOLISTS,\n    SetTodolistsAT,\n} from \"./todolists-reducer\";\nimport {taskAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"./store\";\n\nconst REMOVE_TASK = \"REMOVE_TASK\"\nconst ADD_TASK = \"ADD_TASK\"\nconst CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\"\nconst CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\"\nconst SET_TASKS = \"SET_TASKS\"\n\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state = initialState, action: ActionTypeTask): TaskStateType => {\n    switch (action.type) {\n        case REMOVE_TASK:\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)\n            }\n        case ADD_TASK:\n            return {\n                ...state,\n                [action.todolistId]: [action.task, ...state[action.todolistId]]\n            }\n        case CHANGE_TASK_STATUS:\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => task.id === action.taskId\n                    ? {...task, status: action.status} : task)\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => task.id === action.taskId\n                    ? {...task, title: action.title} : task)\n            }\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        case REMOVE_TODOLIST: {\n            const newState = {...state}\n            delete newState[action.id]\n            return newState\n        }\n        case SET_TODOLISTS: {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = [];\n            })\n            return copyState\n        }\n        case SET_TASKS:\n            return {\n                ...state,\n                [action.todolistId]: [...action.tasks]\n            }\n        default:\n            return state\n    }\n}\n// ####################################\n// action creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\n    type: REMOVE_TASK, taskId, todolistId\n}) as const\n\nexport const addTaskAC = (task: TaskType, todolistId: string) => ({\n    type: ADD_TASK, task, todolistId\n}) as const\n\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListId: string) => ({\n    type: CHANGE_TASK_STATUS, taskId, status, todoListId\n}) as const\n\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => ({\n    type: CHANGE_TASK_TITLE, taskId, title, todoListId\n}) as const\n\nexport const SetTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\n    type: SET_TASKS, tasks, todolistId\n}) as const\n\n// ####################################\n// thunks\n\nexport const fetchTasksTC = (todolistId: string): AppThunk => dispatch => {\n        taskAPI.getTasks(todolistId)\n            .then(res => {\n                dispatch(SetTasksAC(res.data.items, todolistId))\n            })\n}\n\nexport const deleteTaskTC = (taskId: string, todolistId: string): AppThunk => dispatch => {\n        taskAPI.deleteTask(todolistId, taskId)\n            .then(res => {\n                dispatch(removeTaskAC(taskId, todolistId))\n            })\n}\n\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => dispatch => {\n        taskAPI.createTask(todolistId, title)\n            .then(res => {\n                dispatch(addTaskAC(res.data.data.item, todolistId))\n            })\n}\n\nexport const changeTaskTitleTC = (taskId: string, title: string, todoListId: string): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\n        if (!task) return\n        const model: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            startDate: task.startDate,\n            priority: task.priority,\n            status: task.status,\n            title\n        }\n        taskAPI.updateTask(todoListId, taskId, model)\n            .then(res => {\n                dispatch(changeTaskTitleAC(taskId, title, todoListId))\n            })\n}\n\nexport const changeTaskStatusTC = (taskId: string, status: TaskStatuses, todoListId: string): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\n        if (!task) return\n        const model: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            startDate: task.startDate,\n            title: task.title,\n            priority: task.priority,\n            status\n        }\n        taskAPI.updateTask(todoListId, taskId, model)\n            .then(res => {\n                dispatch(changeTaskStatusAC(taskId, status, todoListId))\n            })\n}\n\n// ####################################\n// types\nexport type TaskStateType = {\n    [todoListID: string]: Array<TaskType>\n}\n\nexport type ActionTypeTask =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof changeTaskStatusAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof SetTasksAC>\n    | RemoveTodoListAT\n    | AddTodoListAT\n    | SetTodolistsAT\n\n\n\n","import React, {ChangeEvent, memo, useCallback} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\nimport {DeleteOutline} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {\n    changeTaskStatusTC,\n    changeTaskTitleTC,\n    deleteTaskTC\n} from \"../../state/tasks-reducer\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\nexport const Task: React.FC<TaskPropsType> = memo(({id, todolistId}) => {\n    const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todolistId].filter(task => task.id === id)[0])\n    const dispatch = useDispatch()\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        dispatch(changeTaskStatusTC(id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId))\n    }, [dispatch, id, todolistId])\n    const changeTitle = useCallback((title: string) => dispatch(changeTaskTitleTC(id, title, todolistId)), [id, dispatch, todolistId])\n    const removeTask = useCallback(() => dispatch(deleteTaskTC(id, todolistId)), [dispatch, todolistId, id])\n\n    return (\n        <ListItem divider>\n            <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n                <Checkbox\n                    onChange={onChangeHandler}\n                    checked={task.status === TaskStatuses.Completed}\n                    color={\"primary\"}\n                />\n                <EditableSpan\n                    title={task.title}\n                    changeTitle={changeTitle}\n                />\n            </span>\n            <IconButton aria-label=\"delete\"\n                        size={\"small\"}\n                        onClick={removeTask}>\n                <DeleteOutline/>\n            </IconButton>\n        </ListItem>\n    )\n})\n\ntype TaskPropsType = {\n    id: string\n    todolistId: string\n}\n\n\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {Add} from \"@material-ui/icons\";\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = memo(({addItem, label}) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    }\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error) setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n    const addTask = () => {\n        if (title.trim() !== \"\") {\n            addItem(title.trim());\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\")\n        }\n    }\n    return (\n        <div>\n            <TextField\n                id=\"standard-basic\"\n                label={label}\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressAddItem}\n                className={error ? \"error\" : \"\"}\n                size={\"small\"}\n                error={!!error}/>\n            <IconButton onClick={addTask}>\n                <Add/>\n            </IconButton>\n            {error && <div className=\"error-message\">{error}</div>}\n        </div>\n    );\n});\n\ntype AddItemFormPropsType = {\n    label: string\n    addItem: (title: string) => void\n}\n\n","import React, {memo, useCallback, useEffect} from \"react\";\nimport {TodoListHeader} from \"../TodoListHeader/TodoListHeader\";\nimport {Task} from \"../Task/Task\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {Button, ButtonGroup, List} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    changeTodoListFilterAC,\n    changeTodoListTitleTC,\n    FilterValueType,\n    removeTodolistTC, TodolistDomainType\n} from \"../../state/todolists-reducer\";\nimport {addTaskTC, fetchTasksTC} from \"../../state/tasks-reducer\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\nexport const TodoList: React.FC<TodoListPropsType> = memo(({todoListId}) => {\n    const todolist = useSelector<AppRootStateType, TodolistDomainType>(state => state.todolists.filter(tl => tl.id === todoListId)[0])\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todoListId]);\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchTasksTC(todolist.id))\n    }, [dispatch, todolist.id])\n\n    const setFilterValue = useCallback((filter: FilterValueType) => () => dispatch(changeTodoListFilterAC(todoListId, filter)), [dispatch, todoListId])\n    const setTitleValue = useCallback((title: string) => dispatch(changeTodoListTitleTC(todoListId, title)), [todoListId, dispatch])\n    const removeTodolist = useCallback(() => dispatch(removeTodolistTC(todoListId)), [todoListId, dispatch])\n    const addNewTask = useCallback((title: string) => dispatch(addTaskTC(title, todoListId)), [dispatch, todoListId])\n\n    const getTasksForRender = (tasks: Array<TaskType>, filter: FilterValueType): Array<TaskType> => {\n        let newTasks;\n        switch (filter) {\n            case \"active\":\n                newTasks = tasks.filter(t => t.status === TaskStatuses.New)\n                return newTasks\n            case \"completed\":\n                newTasks = tasks.filter(t => t.status === TaskStatuses.Completed)\n                return newTasks\n            default:\n                return tasks\n        }\n    }\n    const tasksComponents = getTasksForRender(tasks, todolist.filter).map(item => {\n        return (\n            <Task\n                todolistId={todoListId}\n                key={item.id}\n                id={item.id}/>)\n    });\n\n    return (\n        <div className={\"todolist\"}>\n            <TodoListHeader\n                title={todolist.title}\n                removeTodoList={removeTodolist}\n                changeTitle={setTitleValue}/>\n            <AddItemForm\n                addItem={addNewTask}\n                label={\"Enter a task\"}/>\n            <List>\n                {tasksComponents}\n            </List>\n            <ButtonGroup\n                color={\"primary\"}\n                size={\"small\"}\n                className={\"buttonGroup\"}\n                fullWidth\n                style={{marginTop: \"10px\"}}>\n                <Button\n                    variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"all\")}>all</Button>\n                <Button\n                    variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"active\")}>active</Button>\n                <Button\n                    variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"completed\")}>completed</Button>\n            </ButtonGroup>\n        </div>\n    );\n});\n\ntype TodoListPropsType = {\n    todoListId: string\n}\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./components/TodoList/TodoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistTC, fetchTodolistsTC, TodolistDomainType\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nexport const App = () => {\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n       dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={3}>\r\n                    <TodoList\r\n                        todoListId={tl.id}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"25px 0\"}}>\r\n                    <AddItemForm\r\n                        addItem={addTodoList}\r\n                        label={\"Enter a new TodoList\"}\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {ActionTypeTask, tasksReducer} from './tasks-reducer';\nimport {ActionTypeTodolist, todolistsReducer} from './todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport type ActionTypeApp = ActionTypeTodolist | ActionTypeTask\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    AppRootStateType,\n    unknown,\n    ActionTypeApp\n    >\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./App\";\r\nimport {store} from \"./state/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n        <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}