{"version":3,"sources":["serviceWorker.ts","state/app-reduser.ts","components/ErrorSnackbar/ErrorShackbar.tsx","api/todolist-api.ts","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodoListHeader/TodoListHeader.tsx","utils/error-utils.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","components/Task/Task.tsx","components/TodoList/TodoList.tsx","components/Todolists/Todolists.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","APP_SET_STATUS","APP_SET_ERROR","initialState","status","error","setAppStatusAC","type","setAppErrorAC","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","horizontal","vertical","severity","sx","width","TaskStatuses","TaskPriorities","Header","AppBar","position","Toolbar","style","justifyContent","IconButton","edge","color","Menu","Typography","Button","AddItemForm","memo","addItem","label","disabled","useState","title","setTitle","setError","addTask","trim","TextField","id","value","onChange","e","currentTarget","onKeyPress","charCode","className","size","onClick","Add","EditableSpan","changeTitle","newTitle","setNewTitle","editMode","setEditMode","offEditMode","autoFocus","onBlur","key","onDoubleClick","TodoListHeader","removeTodoList","entityStatus","textAlign","DeleteOutline","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","post","todolistId","put","delete","get","taskAPI","taskId","model","handleServerAppError","data","messages","length","handleServerNetworkError","message","REMOVE_TODOLIST","ADD_TODOLIST","SET_TODOLISTS","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","CHANGE_TODOLIST_ENTITY_STATUS","changeTodolistEntityStatusAC","fetchTodolistsTC","then","res","todolists","catch","err","removeTodolistTC","resultCode","addTodolistTC","todolist","item","changeTodoListTitleTC","changeTodoListTitleAC","REMOVE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","SET_TASKS","fetchTasksTC","tasks","SetTasksAC","items","deleteTaskTC","removeTaskAC","addTaskTC","task","addTaskAC","changeTaskTitleTC","todoListId","getState","find","deadline","description","startDate","priority","changeTaskTitleAC","changeTaskStatusTC","changeTaskStatusAC","Task","filter","onChangeHandler","useCallback","newIsDoneValue","checked","Completed","New","removeTask","ListItem","divider","Checkbox","TodoList","tl","useEffect","setFilterValue","changeTodoListFilterAC","setTitleValue","removeTodolist","addNewTask","tasksComponents","t","getTasksForRender","map","List","ButtonGroup","fullWidth","marginTop","Todolists","todoLists","addTodoList","thunk","todoListsComponents","Grid","Paper","Container","fixed","container","padding","spacing","App","LinearProgress","rootReducer","combineReducers","action","newState","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8f62317d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const APP_SET_STATUS = \"APP_SET_STATUS\"\nconst APP_SET_ERROR = \"APP_SET_ERROR\"\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as NullableType<string>\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypeApp): InitialStateType => {\n    switch (action.type) {\n        case APP_SET_STATUS:\n            return {...state, status: action.status}\n        case APP_SET_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n// action creators\nexport const setAppStatusAC = (status: RequestStatusType) => ({\n    type: APP_SET_STATUS, status\n}) as const\n\nexport const setAppErrorAC = (error: NullableType<string>) => ({\n    type: APP_SET_ERROR, error\n}) as const\n\n\n// types\nexport type ActionsTypeApp =\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAppErrorAC>\nexport type InitialStateType = typeof initialState\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type NullableType<T> = null | T\n","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {NullableType, setAppErrorAC} from \"../../state/app-reduser\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, NullableType<string>>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n    };\n\n    return (\n        <Snackbar\n            open={!!error}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            anchorOrigin={{horizontal: \"right\", vertical: \"bottom\"}}>\n\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import axios, {AxiosResponse} from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'a1038b76-ce0b-4e0f-8fa8-c2cb1917e698'\n    }\n})\n\n// ####################################\n// api\n\nexport const todolistAPI = {\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`/todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\n    },\n    getTodolists() {\n        return instance.get<Array<TodolistType>>(`/todo-lists`)\n    }\n}\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks`, {title})\n        //return instance.post<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask1(todolistId: string, taskId: string, title: string) {\n        return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n\n}\n\n\n// ####################################\n// types\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    completed: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Menu} from \"@material-ui/icons\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport React from \"react\";\n\n\nexport const Header = () => {\n\n  return (\n      <AppBar position=\"static\">\n          <Toolbar style={{justifyContent: \"space-between\"}}>\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                  <Menu/>\n              </IconButton>\n              <Typography variant=\"h6\">\n                  TodoLists\n              </Typography>\n              <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\n          </Toolbar>\n      </AppBar>\n  )\n}\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {Add} from \"@material-ui/icons\";\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = memo(({addItem, label, disabled}) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error) setError(null);\n        setTitle(e.currentTarget.value);\n    }\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error) setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n    const addTask = () => {\n        if (title.trim() !== \"\") {\n            addItem(title.trim());\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\")\n        }\n    }\n    return (\n        <div>\n            <TextField\n                id=\"standard-basic\"\n                label={label}\n                disabled={disabled}\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressAddItem}\n                className={error ? \"error\" : \"\"}\n                size={\"small\"}\n                error={!!error}/>\n            <IconButton onClick={addTask} disabled={disabled}>\n                <Add/>\n            </IconButton>\n            {error && <div className=\"error-message\">{error}</div>}\n        </div>\n    );\n});\n\ntype AddItemFormPropsType = {\n    label: string\n    disabled?: boolean\n    addItem: (title: string) => void\n}\n\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = memo(({title, changeTitle}) => {\n    const [newTitle, setNewTitle] = useState<string>(title);\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onChangeSetUserText = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value);\n    }\n    const onEditMode = () => {\n        setEditMode(true)\n    }\n    const offEditMode = () => {\n        setEditMode(false)\n        changeTitle(newTitle)\n    }\n    const onKeyPressOffMode = (e: KeyboardEvent<HTMLInputElement>) => e.key === \"Enter\" && offEditMode()\n\n    return (\n        editMode\n            ? <TextField\n                id=\"outlined-basic\"\n                autoFocus={true}\n                value={newTitle}\n                onChange={onChangeSetUserText}\n                onBlur={offEditMode}\n                onKeyPress={onKeyPressOffMode}\n                size={\"small\"}/>\n            : <span onDoubleClick={onEditMode}>{title}</span>\n    );\n});\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\n\n","import React, {memo} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {DeleteOutline} from \"@material-ui/icons\";\nimport {IconButton} from \"@material-ui/core\";\nimport {RequestStatusType} from \"../../state/app-reduser\";\n\nexport const TodoListHeader: React.FC<TodoListHeaderProps> = memo(({title, removeTodoList, changeTitle, entityStatus}) => {\n    const remove = () => removeTodoList()\n    return (\n        <h3 style={{textAlign: \"center\"}}>\n            <EditableSpan title={title} changeTitle={changeTitle}/>\n            <IconButton aria-label=\"delete\"\n                        onClick={remove}\n            disabled={entityStatus === 'loading'}>\n                <DeleteOutline/>\n            </IconButton>\n        </h3>\n    )\n})\n\ntype TodoListHeaderProps = {\n    title: string\n    removeTodoList: () => void\n    changeTitle: (title: string) => void\n    entityStatus: RequestStatusType\n}\n\n","import { Dispatch } from 'redux';\nimport {setAppErrorAC, setAppStatusAC} from \"../state/app-reduser\";\nimport {ResponseType} from \"../api/todolist-api\";\nimport {ActionType} from \"../state/store\";\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch:  Dispatch<ActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (message: string, dispatch:  Dispatch<ActionType>) => {\n    dispatch(setAppErrorAC(message))\n    dispatch(setAppStatusAC('failed'))\n}\n\n","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\nimport {AppThunk} from \"./store\";\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reduser\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\nexport const REMOVE_TODOLIST = \"REMOVE_TODOLIST\"\nexport const ADD_TODOLIST = \"ADD_TODOLIST\"\nexport const SET_TODOLISTS = \"SET_TODOLISTS\"\nconst CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\"\nconst CHANGE_TODOLIST_FILTER = \"CHANGE_TODOLIST_FILTER\"\nconst CHANGE_TODOLIST_ENTITY_STATUS = \"CHANGE_TODOLIST_ENTITY_STATUS\"\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (todoLists = initialState, action: ActionTypeTodolist): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case REMOVE_TODOLIST:\n            return todoLists.filter(tl => tl.id !== action.id)\n        case ADD_TODOLIST:\n            return [...todoLists, {\n                ...action.todolist,\n                filter: \"all\",\n                entityStatus: \"idle\"\n\n            }]\n        case CHANGE_TODOLIST_TITLE:\n            return todoLists.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case CHANGE_TODOLIST_FILTER:\n            return todoLists.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case SET_TODOLISTS:\n            return action.todolists.map(t => {\n                return {...t, filter: \"all\", entityStatus: \"idle\"}\n            })\n        case CHANGE_TODOLIST_ENTITY_STATUS:\n            return todoLists.map(tl => tl.id === action.id\n                ? {...tl, entityStatus: action.entityStatus} : tl)\n        default:\n            return todoLists\n    }\n}\n\n// ####################################\n// action creators\n\nexport const removeTodoListAC = (id: string) => ({\n    type: REMOVE_TODOLIST, id: id\n}) as const\n\nexport const addTodoListAC = (todolist: TodolistType) => ({\n    type: ADD_TODOLIST, todolist\n}) as const\n\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\n    type: CHANGE_TODOLIST_TITLE, id, title\n}) as const\n\nexport const changeTodoListFilterAC = (id: string, filter: FilterValueType) => ({\n    type: CHANGE_TODOLIST_FILTER, id, filter\n}) as const\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\n    type: SET_TODOLISTS, todolists\n}) as const\n\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\n    type: CHANGE_TODOLIST_ENTITY_STATUS, id, entityStatus\n}) as const\n\n// ####################################\n// thunks\n\nexport const fetchTodolistsTC = (): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.getTodolists()\n        .then(res => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(setTodolistsAC(res.data))\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n    })\n}\n\nexport const removeTodolistTC = (todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n    todolistAPI.deleteTodolist(todolistId)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\n                dispatch(removeTodoListAC(todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n    })\n}\n\nexport const addTodolistTC = (title: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.createTodolist(title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(addTodoListAC(res.data.data.item))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.updateTodolist(id, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(changeTodoListTitleAC(id, title))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\n// ####################################\n// types\n\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValueType\n    entityStatus: RequestStatusType\n}\nexport type RemoveTodoListAT = ReturnType<typeof removeTodoListAC>\nexport type AddTodoListAT = ReturnType<typeof addTodoListAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\n\nexport type ActionTypeTodolist =\n    | RemoveTodoListAT\n    | AddTodoListAT\n    | SetTodolistsAT\n    | ReturnType<typeof changeTodoListTitleAC>\n    | ReturnType<typeof changeTodoListFilterAC>\n    | ReturnType<typeof changeTodolistEntityStatusAC>\n\n","import {\n    ADD_TODOLIST,\n    AddTodoListAT, REMOVE_TODOLIST,\n    RemoveTodoListAT, SET_TODOLISTS,\n    SetTodolistsAT,\n} from \"./todolists-reducer\";\nimport {taskAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"./store\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {setAppStatusAC} from \"./app-reduser\";\n\n\n\nconst REMOVE_TASK = \"REMOVE_TASK\"\nconst ADD_TASK = \"ADD_TASK\"\nconst CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\"\nconst CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\"\nconst SET_TASKS = \"SET_TASKS\"\n\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state = initialState, action: ActionTypeTask): TaskStateType => {\n    switch (action.type) {\n        case REMOVE_TASK:\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)\n            }\n        case ADD_TASK:\n            return {\n                ...state,\n                [action.todolistId]: [action.task, ...state[action.todolistId]]\n            }\n        case CHANGE_TASK_STATUS:\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => task.id === action.taskId\n                    ? {...task, status: action.status} : task)\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => task.id === action.taskId\n                    ? {...task, title: action.title} : task)\n            }\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        case REMOVE_TODOLIST: {\n            const newState = {...state}\n            delete newState[action.id]\n            return newState\n        }\n        case SET_TODOLISTS: {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = [];\n            })\n            return copyState\n        }\n        case SET_TASKS:\n            return {\n                ...state,\n                [action.todolistId]: [...action.tasks]\n            }\n        default:\n            return state\n    }\n}\n// ####################################\n// action creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\n    type: REMOVE_TASK, taskId, todolistId\n}) as const\n\nexport const addTaskAC = (task: TaskType, todolistId: string) => ({\n    type: ADD_TASK, task, todolistId\n}) as const\n\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListId: string) => ({\n    type: CHANGE_TASK_STATUS, taskId, status, todoListId\n}) as const\n\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => ({\n    type: CHANGE_TASK_TITLE, taskId, title, todoListId\n}) as const\n\nexport const SetTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\n    type: SET_TASKS, tasks, todolistId\n}) as const\n\n// ####################################\n// thunks\n\nexport const fetchTasksTC = (todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.getTasks(todolistId)\n        .then(res => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(SetTasksAC(res.data.items, todolistId))\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const deleteTaskTC = (taskId: string, todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(removeTaskAC(taskId, todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(addTaskAC(res.data.data.item, todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const changeTaskTitleTC = (taskId: string, title: string, todoListId: string): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\n        if (!task) return\n        const model: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            startDate: task.startDate,\n            priority: task.priority,\n            status: task.status,\n            title\n        }\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.updateTask(todoListId, taskId, model)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setAppStatusAC('succeeded'))\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(err.message, dispatch)\n            })\n    }\n\nexport const changeTaskStatusTC = (taskId: string, status: TaskStatuses, todoListId: string): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\n        if (!task) return\n        const model: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            startDate: task.startDate,\n            title: task.title,\n            priority: task.priority,\n            status\n        }\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.updateTask(todoListId, taskId, model)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setAppStatusAC('succeeded'))\n                    dispatch(changeTaskStatusAC(taskId, status, todoListId))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(err.message, dispatch)\n            })\n    }\n\n// ####################################\n// types\n\nexport type TaskStateType = {\n    [todoListID: string]: Array<TaskType>\n}\n\nexport type ActionTypeTask =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof changeTaskStatusAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof SetTasksAC>\n    | RemoveTodoListAT\n    | AddTodoListAT\n    | SetTodolistsAT\n\n\n\n","import React, {ChangeEvent, memo, useCallback} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\nimport {DeleteOutline} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {\n    changeTaskStatusTC,\n    changeTaskTitleTC,\n    deleteTaskTC\n} from \"../../state/tasks-reducer\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\nexport const Task: React.FC<TaskPropsType> = memo(({id, todolistId}) => {\n    const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todolistId].filter(task => task.id === id)[0])\n    const dispatch = useDispatch()\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        dispatch(changeTaskStatusTC(id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId))\n    }, [dispatch, id, todolistId])\n    const changeTitle = useCallback((title: string) => dispatch(changeTaskTitleTC(id, title, todolistId)), [id, dispatch, todolistId])\n    const removeTask = useCallback(() => dispatch(deleteTaskTC(id, todolistId)), [dispatch, todolistId, id])\n\n    return (\n        <ListItem divider style={{justifyContent: \"space-between\"}}>\n            <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n                <Checkbox\n                    onChange={onChangeHandler}\n                    checked={task.status === TaskStatuses.Completed}\n                    color={\"primary\"}\n                />\n                <EditableSpan\n                    title={task.title}\n                    changeTitle={changeTitle}\n                />\n            </span>\n            <IconButton aria-label=\"delete\"\n                        size={\"small\"}\n                        onClick={removeTask}>\n                <DeleteOutline/>\n            </IconButton>\n        </ListItem>\n    )\n})\n\ntype TaskPropsType = {\n    id: string\n    todolistId: string\n}\n\n\n","import React, {memo, useCallback, useEffect} from \"react\";\nimport {TodoListHeader} from \"../TodoListHeader/TodoListHeader\";\nimport {Task} from \"../Task/Task\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {Button, ButtonGroup, List} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    changeTodoListFilterAC,\n    changeTodoListTitleTC,\n    FilterValueType,\n    removeTodolistTC, TodolistDomainType\n} from \"../../state/todolists-reducer\";\nimport {addTaskTC, fetchTasksTC} from \"../../state/tasks-reducer\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\nexport const TodoList: React.FC<TodoListPropsType> = memo(({todoListId}) => {\n    const todolist = useSelector<AppRootStateType, TodolistDomainType>(state => state.todolists.filter(tl => tl.id === todoListId)[0])\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todoListId]);\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchTasksTC(todolist.id))\n    }, [dispatch, todolist.id])\n\n    const setFilterValue = useCallback((filter: FilterValueType) => () => dispatch(changeTodoListFilterAC(todoListId, filter)), [dispatch, todoListId])\n    const setTitleValue = useCallback((title: string) => dispatch(changeTodoListTitleTC(todoListId, title)), [todoListId, dispatch])\n    const removeTodolist = useCallback(() => dispatch(removeTodolistTC(todoListId)), [todoListId, dispatch])\n    const addNewTask = useCallback((title: string) => dispatch(addTaskTC(title, todoListId)), [dispatch, todoListId])\n\n    const getTasksForRender = (tasks: Array<TaskType>, filter: FilterValueType): Array<TaskType> => {\n        let newTasks;\n        switch (filter) {\n            case \"active\":\n                newTasks = tasks.filter(t => t.status === TaskStatuses.New)\n                return newTasks\n            case \"completed\":\n                newTasks = tasks.filter(t => t.status === TaskStatuses.Completed)\n                return newTasks\n            default:\n                return tasks\n        }\n    }\n    const tasksComponents = getTasksForRender(tasks, todolist.filter).map(item => {\n        return (\n            <Task\n                todolistId={todoListId}\n                key={item.id}\n                id={item.id}/>)\n    });\n\n    return (\n        <div className={\"todolist\"}>\n            <TodoListHeader\n                title={todolist.title}\n                removeTodoList={removeTodolist}\n                changeTitle={setTitleValue}\n                entityStatus={todolist.entityStatus}\n            />\n            <AddItemForm\n                disabled={todolist.entityStatus === \"loading\"}\n                addItem={addNewTask}\n                label={\"Add a task\"}/>\n            <List>\n                {tasksComponents}\n            </List>\n            <ButtonGroup\n                color={\"primary\"}\n                size={\"small\"}\n                className={\"buttonGroup\"}\n                fullWidth\n                style={{marginTop: \"10px\"}}>\n                <Button\n                    variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"all\")}>all</Button>\n                <Button\n                    variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"active\")}>active</Button>\n                <Button\n                    variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"completed\")}>done</Button>\n            </ButtonGroup>\n        </div>\n    );\n});\n\ntype TodoListPropsType = {\n    todoListId: string\n}\n","import Grid from \"@material-ui/core/Grid\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport Container from \"@material-ui/core/Container\";\nimport React, {useCallback, useEffect} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {TodoList} from \"../TodoList/TodoList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {addTodolistTC, fetchTodolistsTC, TodolistDomainType} from \"../../state/todolists-reducer\";\n\nexport const Todolists = () => {\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        dispatch(fetchTodolistsTC())\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const todoListsComponents = todoLists.map(tl => {\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={3}>\n                    <TodoList todoListId={tl.id}/>\n                </Paper>\n            </Grid>\n        )\n    })\n    return (\n        <Container fixed>\n            <Grid container style={{padding: \"25px 0\"}}>\n                <AddItemForm\n                    addItem={addTodoList}\n                    label={\"Create a new todo\"}\n                />\n            </Grid>\n            <Grid container spacing={4}>\n                {todoListsComponents}\n            </Grid>\n        </Container>\n    )\n}\n","import React from 'react';\r\nimport './App.css';\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorShackbar\";\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {Todolists} from \"./components/Todolists/Todolists\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {RequestStatusType} from \"./state/app-reduser\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\n\r\nexport const App = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType >(state => state.app.status)\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            { status === 'loading' && <LinearProgress color=\"secondary\"/> }\r\n            <Todolists/>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {ActionTypeTask, tasksReducer} from './tasks-reducer';\nimport {ActionTypeTodolist, todolistsReducer} from './todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {ActionsTypeApp, appReducer} from \"./app-reduser\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer\n})\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport type ActionType = ActionTypeTodolist | ActionTypeTask | ActionsTypeApp\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    AppRootStateType,\n    unknown,\n    ActionType\n    >\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./App\";\r\nimport {store} from \"./state/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n        <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}