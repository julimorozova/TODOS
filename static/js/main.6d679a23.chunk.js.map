{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/auth-reducer.ts","state/app-reduser.ts","components/ErrorSnackbar/ErrorShackbar.tsx","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/TodoListHeader/TodoListHeader.tsx","components/Task/Task.tsx","components/TodoList/TodoList.tsx","pages/Todolists/Todolists.tsx","pages/Login/Login.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","title","post","todolistId","put","delete","get","taskAPI","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","REMOVE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","SET_TASKS","initialState","fetchTasksTC","then","res","tasks","type","SetTasksAC","items","catch","err","deleteTaskTC","resultCode","removeTaskAC","addTaskTC","task","addTaskAC","item","changeTaskTitleTC","todoListId","getState","find","id","deadline","description","startDate","priority","status","changeTaskTitleAC","changeTaskStatusTC","changeTaskStatusAC","REMOVE_TODOLIST","ADD_TODOLIST","SET_TODOLISTS","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","CHANGE_TODOLIST_ENTITY_STATUS","changeTodolistEntityStatusAC","entityStatus","fetchTodolistsTC","todolists","todos","forEach","tl","removeTodolistTC","addTodolistTC","todolist","changeTodoListTitleTC","changeTodoListTitleAC","isLoggedIn","setIsLoggedInAC","APP_SET_STATUS","APP_SET_ERROR","APP_SET_IS_INITIALIZED","error","isInitialized","initializeAppTC","finally","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","horizontal","vertical","severity","sx","width","Header","auth","AppBar","position","Toolbar","style","justifyContent","IconButton","edge","color","Menu","Typography","Button","onClick","AddItemForm","memo","addItem","label","disabled","useState","setTitle","setError","addTask","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","className","size","Add","EditableSpan","changeTitle","newTitle","setNewTitle","editMode","setEditMode","offEditMode","autoFocus","onBlur","key","onDoubleClick","TodoListHeader","removeTodoList","textAlign","DeleteOutline","Task","filter","onChangeHandler","useCallback","newIsDoneValue","checked","Completed","New","removeTask","ListItem","divider","Checkbox","TodoList","setFilterValue","changeTodoListFilterAC","setTitleValue","removeTodolist","addNewTask","tasksComponents","t","getTasksForRender","map","List","ButtonGroup","fullWidth","marginTop","Todolists","todoLists","useEffect","addTodoList","thunk","todoListsComponents","Grid","Paper","Container","fixed","container","padding","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","LinearProgress","path","element","top","CircularProgress","rootReducer","combineReducers","action","newState","copyState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6d679a23.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'a1038b76-ce0b-4e0f-8fa8-c2cb1917e698'\n    }\n})\n\n// ####################################\n// api\n\nexport const todolistAPI = {\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n    },\n    getTodolists() {\n        return instance.get<Array<TodolistType>>(`todo-lists`)\n    }\n}\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title})\n        //return instance.post<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask1(todolistId: string, taskId: string, title: string) {\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data)\n    },\n    me() {\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\n    },\n    logout() {\n        return instance.delete<ResponseType>(`auth/login`)\n    }\n}\n\n// ####################################\n// types\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    completed: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\n\n","import { Dispatch } from 'redux';\nimport {setAppErrorAC, setAppStatusAC} from \"../state/app-reduser\";\nimport {ResponseType} from \"../api/todolist-api\";\nimport {ActionType} from \"../state/store\";\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch:  Dispatch<ActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (message: string, dispatch:  Dispatch<ActionType>) => {\n    dispatch(setAppErrorAC(message))\n    dispatch(setAppStatusAC('failed'))\n}\n\n","import {\n    ADD_TODOLIST,\n    AddTodoListAT, ClearDataAT, REMOVE_TODOLIST,\n    RemoveTodoListAT, SET_TODOLISTS,\n    SetTodolistsAT,\n} from \"./todolists-reducer\";\nimport {taskAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"./store\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {setAppStatusAC} from \"./app-reduser\";\n\nconst REMOVE_TASK = \"REMOVE_TASK\"\nconst ADD_TASK = \"ADD_TASK\"\nconst CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\"\nconst CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\"\nconst SET_TASKS = \"SET_TASKS\"\n\nconst initialState: TaskStateType = {}\n\nexport const tasksReducer = (state = initialState, action: ActionTypeTask): TaskStateType => {\n    switch (action.type) {\n        case REMOVE_TASK:\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)\n            }\n        case ADD_TASK:\n            return {\n                ...state,\n                [action.todolistId]: [action.task, ...state[action.todolistId]]\n            }\n        case CHANGE_TASK_STATUS:\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => task.id === action.taskId\n                    ? {...task, status: action.status} : task)\n            }\n        case CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(task => task.id === action.taskId\n                    ? {...task, title: action.title} : task)\n            }\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        case REMOVE_TODOLIST: {\n            const newState = {...state}\n            delete newState[action.id]\n            return newState\n        }\n        case SET_TODOLISTS: {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = [];\n            })\n            return copyState\n        }\n        case SET_TASKS:\n            return {\n                ...state,\n                [action.todolistId]: [...action.tasks]\n            }\n        case \"CLEAR_DATA\":\n            return {}\n        default:\n            return state\n    }\n}\n// ####################################\n// action creators\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\n    type: REMOVE_TASK, taskId, todolistId\n}) as const\n\nexport const addTaskAC = (task: TaskType, todolistId: string) => ({\n    type: ADD_TASK, task, todolistId\n}) as const\n\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListId: string) => ({\n    type: CHANGE_TASK_STATUS, taskId, status, todoListId\n}) as const\n\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string) => ({\n    type: CHANGE_TASK_TITLE, taskId, title, todoListId\n}) as const\n\nexport const SetTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\n    type: SET_TASKS, tasks, todolistId\n}) as const\n\n// ####################################\n// thunks\n\nexport const fetchTasksTC = (todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.getTasks(todolistId)\n        .then(res => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(SetTasksAC(res.data.items, todolistId))\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const deleteTaskTC = (taskId: string, todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(removeTaskAC(taskId, todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(addTaskAC(res.data.data.item, todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const changeTaskTitleTC = (taskId: string, title: string, todoListId: string): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\n        if (!task) return\n        const model: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            startDate: task.startDate,\n            priority: task.priority,\n            status: task.status,\n            title\n        }\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.updateTask(todoListId, taskId, model)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setAppStatusAC('succeeded'))\n                    dispatch(changeTaskTitleAC(taskId, title, todoListId))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(err.message, dispatch)\n            })\n    }\n\nexport const changeTaskStatusTC = (taskId: string, status: TaskStatuses, todoListId: string): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todoListId].find(task => task.id === taskId)\n        if (!task) return\n        const model: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            startDate: task.startDate,\n            title: task.title,\n            priority: task.priority,\n            status\n        }\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.updateTask(todoListId, taskId, model)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setAppStatusAC('succeeded'))\n                    dispatch(changeTaskStatusAC(taskId, status, todoListId))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(err.message, dispatch)\n            })\n    }\n\n// ####################################\n// types\n\nexport type TaskStateType = {\n    [todoListID: string]: Array<TaskType>\n}\n\nexport type ActionTypeTask =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof changeTaskStatusAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof SetTasksAC>\n    | RemoveTodoListAT\n    | AddTodoListAT\n    | SetTodolistsAT\n    | ClearDataAT\n\n\n\n","import {todolistAPI, TodolistType} from \"../api/todolist-api\";\nimport {AppThunk} from \"./store\";\nimport {RequestStatusType, setAppStatusAC} from \"./app-reduser\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {fetchTasksTC} from \"./tasks-reducer\";\n\nexport const REMOVE_TODOLIST = \"REMOVE_TODOLIST\"\nexport const ADD_TODOLIST = \"ADD_TODOLIST\"\nexport const SET_TODOLISTS = \"SET_TODOLISTS\"\nconst CHANGE_TODOLIST_TITLE = \"CHANGE_TODOLIST_TITLE\"\nconst CHANGE_TODOLIST_FILTER = \"CHANGE_TODOLIST_FILTER\"\nconst CHANGE_TODOLIST_ENTITY_STATUS = \"CHANGE_TODOLIST_ENTITY_STATUS\"\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (todoLists = initialState, action: ActionTypeTodolist): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case REMOVE_TODOLIST:\n            return todoLists.filter(tl => tl.id !== action.id)\n        case ADD_TODOLIST:\n            return [...todoLists, {\n                ...action.todolist,\n                filter: \"all\",\n                entityStatus: \"idle\"\n            }]\n        case CHANGE_TODOLIST_TITLE:\n            return todoLists.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case CHANGE_TODOLIST_FILTER:\n            return todoLists.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case SET_TODOLISTS:\n            return action.todolists.map(t => {\n                return {...t, filter: \"all\", entityStatus: \"idle\"}\n            })\n        case CHANGE_TODOLIST_ENTITY_STATUS:\n            return todoLists.map(tl => tl.id === action.id\n                ? {...tl, entityStatus: action.entityStatus} : tl)\n        case \"CLEAR_DATA\":\n            return []\n        default:\n            return todoLists\n    }\n}\n\n// ####################################\n// action creators\n\nexport const removeTodoListAC = (id: string) => ({\n    type: REMOVE_TODOLIST, id: id\n}) as const\n\nexport const addTodoListAC = (todolist: TodolistType) => ({\n    type: ADD_TODOLIST, todolist\n}) as const\n\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\n    type: CHANGE_TODOLIST_TITLE, id, title\n}) as const\n\nexport const changeTodoListFilterAC = (id: string, filter: FilterValueType) => ({\n    type: CHANGE_TODOLIST_FILTER, id, filter\n}) as const\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\n    type: SET_TODOLISTS, todolists\n}) as const\n\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\n    type: CHANGE_TODOLIST_ENTITY_STATUS, id, entityStatus\n}) as const\n\nexport const clearDataAC = () => ({type: 'CLEAR_DATA'}) as const\n\n// ####################################\n// thunks\n\nexport const fetchTodolistsTC = (): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.getTodolists()\n        .then(res => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(setTodolistsAC(res.data))\n            return res.data\n        })\n        .then((todos) => {\n            todos.forEach(tl => {\n                dispatch(fetchTasksTC(tl.id))\n            })\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n    })\n}\n\nexport const removeTodolistTC = (todolistId: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n    todolistAPI.deleteTodolist(todolistId)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\n                dispatch(removeTodoListAC(todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n    })\n}\n\nexport const addTodolistTC = (title: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.createTodolist(title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(addTodoListAC(res.data.data.item))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\nexport const changeTodoListTitleTC = (id: string, title: string): AppThunk => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.updateTodolist(id, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatusAC('succeeded'))\n                dispatch(changeTodoListTitleAC(id, title))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n}\n\n// ####################################\n// types\n\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValueType\n    entityStatus: RequestStatusType\n}\nexport type RemoveTodoListAT = ReturnType<typeof removeTodoListAC>\nexport type AddTodoListAT = ReturnType<typeof addTodoListAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\nexport type ClearDataAT = ReturnType<typeof clearDataAC>\n\nexport type ActionTypeTodolist =\n    | RemoveTodoListAT\n    | AddTodoListAT\n    | SetTodolistsAT\n    | ReturnType<typeof changeTodoListTitleAC>\n    | ReturnType<typeof changeTodoListFilterAC>\n    | ReturnType<typeof changeTodolistEntityStatusAC>\n    | ClearDataAT\n\n","import {authAPI, LoginParamsType} from \"../api/todolist-api\";\nimport {AppThunk} from \"./store\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {setAppStatusAC} from \"./app-reduser\";\nimport {clearDataAC} from \"./todolists-reducer\";\n\nconst initialState: InitialState = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state: InitialState = initialState, action: ActionTypeAuth) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return {...state, isLoggedIn: action.isLoggedIn}\n        default:\n            return state\n    }\n}\n\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\n    ({type: 'LOGIN', isLoggedIn}) as const\n\nexport const loginTC = (data: LoginParamsType): AppThunk => {\n    return (dispatch => {\n        dispatch(setAppStatusAC('loading'))\n        authAPI.login(data)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setIsLoggedInAC(true))\n                    dispatch(setAppStatusAC('succeeded'))\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(err.message, dispatch)\n            })\n    })\n}\n\nexport const logoutTC = (): AppThunk => {\n    return (dispatch => {\n        dispatch(setAppStatusAC('loading'))\n        authAPI.logout()\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setIsLoggedInAC(false))\n                    dispatch(setAppStatusAC('succeeded'))\n                    dispatch(clearDataAC())\n                } else {\n                    handleServerAppError(res.data, dispatch)\n                }\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(err.message, dispatch)\n            })\n    })\n}\n\ntype InitialState = {\n    isLoggedIn: boolean\n}\nexport type ActionTypeAuth = ReturnType<typeof setIsLoggedInAC>\n","import {AppThunk} from \"./store\";\nimport {setIsLoggedInAC} from \"./auth-reducer\";\nimport {authAPI} from \"../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {AxiosError} from \"axios\";\n\nconst APP_SET_STATUS = \"APP_SET_STATUS\"\nconst APP_SET_ERROR = \"APP_SET_ERROR\"\nconst APP_SET_IS_INITIALIZED = \"APP_SET_IS_INITIALIZED\"\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as NullableType<string>,\n    isInitialized: false as boolean\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypeApp): InitialStateType => {\n    switch (action.type) {\n        case APP_SET_STATUS:\n            return {...state, status: action.status}\n        case APP_SET_ERROR:\n            return {...state, error: action.error}\n        case APP_SET_IS_INITIALIZED:\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return state\n    }\n}\n\n// action creators\nexport const setAppStatusAC = (status: RequestStatusType) => ({\n    type: APP_SET_STATUS, status\n}) as const\n\nexport const setAppErrorAC = (error: NullableType<string>) => ({\n    type: APP_SET_ERROR, error\n}) as const\n\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\n    type: APP_SET_IS_INITIALIZED, isInitialized\n}) as const\n\n// thunks\nexport const initializeAppTC = (): AppThunk =>\n    (dispatch) => {\n    authAPI.me()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true));\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(err.message, dispatch)\n        })\n        .finally(() => {\n            dispatch(setIsInitializedAC(true))\n        })\n}\n\n// types\nexport type ActionsTypeApp =\n    | ReturnType<typeof setAppStatusAC>\n    | ReturnType<typeof setAppErrorAC>\n    | ReturnType<typeof setIsInitializedAC>\nexport type InitialStateType = typeof initialState\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type NullableType<T> = null | T\n","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {NullableType, setAppErrorAC} from \"../../state/app-reduser\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, NullableType<string>>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n    };\n\n    return (\n        <Snackbar\n            open={!!error}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            anchorOrigin={{horizontal: \"right\", vertical: \"bottom\"}}>\n\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Menu} from \"@material-ui/icons\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {logoutTC} from \"../../state/auth-reducer\";\n\nexport const Header = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    }\n    return (\n        <AppBar position=\"static\">\n            <Toolbar style={{justifyContent: \"space-between\"}}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <Menu/>\n                </IconButton>\n                <Typography variant=\"h6\">\n                    TodoLists\n                </Typography>\n                {isLoggedIn\n                    ? <Button color=\"inherit\" variant={\"outlined\"} onClick={logoutHandler}>Logout</Button>\n                    : <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\n                }\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {Add} from \"@material-ui/icons\";\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = memo(({addItem, label, disabled}) => {\n    const [title, setTitle] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error) setError(null);\n        setTitle(e.currentTarget.value);\n    }\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error) setError(null);\n        if (e.charCode === 13) {\n            addTask();\n        }\n    }\n    const addTask = () => {\n        if (title.trim() !== \"\") {\n            addItem(title.trim());\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\")\n        }\n    }\n    return (\n        <div>\n            <TextField\n                id=\"standard-basic\"\n                label={label}\n                disabled={disabled}\n                value={title}\n                onChange={onChangeSetTitle}\n                onKeyPress={onKeyPressAddItem}\n                className={error ? \"error\" : \"\"}\n                size={\"small\"}\n                error={!!error}/>\n            <IconButton onClick={addTask} disabled={disabled}>\n                <Add/>\n            </IconButton>\n            {error && <div className=\"error-message\">{error}</div>}\n        </div>\n    );\n});\n\ntype AddItemFormPropsType = {\n    label: string\n    disabled?: boolean\n    addItem: (title: string) => void\n}\n\n","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = memo(({title, changeTitle}) => {\n    const [newTitle, setNewTitle] = useState<string>(title);\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onChangeSetUserText = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value);\n    }\n    const onEditMode = () => {\n        setEditMode(true)\n    }\n    const offEditMode = () => {\n        setEditMode(false)\n        changeTitle(newTitle)\n    }\n    const onKeyPressOffMode = (e: KeyboardEvent<HTMLInputElement>) => e.key === \"Enter\" && offEditMode()\n\n    return (\n        editMode\n            ? <TextField\n                id=\"outlined-basic\"\n                autoFocus={true}\n                value={newTitle}\n                onChange={onChangeSetUserText}\n                onBlur={offEditMode}\n                onKeyPress={onKeyPressOffMode}\n                size={\"small\"}/>\n            : <span onDoubleClick={onEditMode}>{title}</span>\n    );\n});\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\n\n\n","import React, {memo} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {DeleteOutline} from \"@material-ui/icons\";\nimport {IconButton} from \"@material-ui/core\";\nimport {RequestStatusType} from \"../../state/app-reduser\";\n\nexport const TodoListHeader: React.FC<TodoListHeaderProps> = memo(({title, removeTodoList, changeTitle, entityStatus}) => {\n    const remove = () => removeTodoList()\n    return (\n        <h3 style={{textAlign: \"center\"}}>\n            <EditableSpan title={title} changeTitle={changeTitle}/>\n            <IconButton aria-label=\"delete\"\n                        onClick={remove}\n            disabled={entityStatus === 'loading'}>\n                <DeleteOutline/>\n            </IconButton>\n        </h3>\n    )\n})\n\ntype TodoListHeaderProps = {\n    title: string\n    removeTodoList: () => void\n    changeTitle: (title: string) => void\n    entityStatus: RequestStatusType\n}\n\n","import React, {ChangeEvent, memo, useCallback} from \"react\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\nimport {DeleteOutline} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {\n    changeTaskStatusTC,\n    changeTaskTitleTC,\n    deleteTaskTC\n} from \"../../state/tasks-reducer\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\nexport const Task: React.FC<TaskPropsType> = memo(({id, todolistId}) => {\n    const task = useSelector<AppRootStateType, TaskType>(state => state.tasks[todolistId].filter(task => task.id === id)[0])\n    const dispatch = useDispatch()\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        dispatch(changeTaskStatusTC(id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId))\n    }, [dispatch, id, todolistId])\n    const changeTitle = useCallback((title: string) => dispatch(changeTaskTitleTC(id, title, todolistId)), [id, dispatch, todolistId])\n    const removeTask = useCallback(() => dispatch(deleteTaskTC(id, todolistId)), [dispatch, todolistId, id])\n\n    return (\n        <ListItem divider style={{justifyContent: \"space-between\"}}>\n            <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n                <Checkbox\n                    onChange={onChangeHandler}\n                    checked={task.status === TaskStatuses.Completed}\n                    color={\"primary\"}\n                />\n                <EditableSpan\n                    title={task.title}\n                    changeTitle={changeTitle}\n                />\n            </span>\n            <IconButton aria-label=\"delete\"\n                        size={\"small\"}\n                        onClick={removeTask}>\n                <DeleteOutline/>\n            </IconButton>\n        </ListItem>\n    )\n})\n\ntype TaskPropsType = {\n    id: string\n    todolistId: string\n}\n\n\n","import React, {memo, useCallback} from \"react\";\nimport {TodoListHeader} from \"../TodoListHeader/TodoListHeader\";\nimport {Task} from \"../Task/Task\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {Button, ButtonGroup, List} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    changeTodoListFilterAC,\n    changeTodoListTitleTC,\n    FilterValueType,\n    removeTodolistTC, TodolistDomainType\n} from \"../../state/todolists-reducer\";\nimport {addTaskTC} from \"../../state/tasks-reducer\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\nexport const TodoList: React.FC<TodoListPropsType> = memo(({todoListId}) => {\n    const todolist = useSelector<AppRootStateType, TodolistDomainType>(state => state.todolists.filter(tl => tl.id === todoListId)[0])\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todoListId]);\n\n    const dispatch = useDispatch()\n\n    const setFilterValue = useCallback((filter: FilterValueType) => () => dispatch(changeTodoListFilterAC(todoListId, filter)), [dispatch, todoListId])\n    const setTitleValue = useCallback((title: string) => dispatch(changeTodoListTitleTC(todoListId, title)), [todoListId, dispatch])\n    const removeTodolist = useCallback(() => dispatch(removeTodolistTC(todoListId)), [todoListId, dispatch])\n    const addNewTask = useCallback((title: string) => dispatch(addTaskTC(title, todoListId)), [dispatch, todoListId])\n\n    const getTasksForRender = (tasks: Array<TaskType>, filter: FilterValueType): Array<TaskType> => {\n        let newTasks;\n        switch (filter) {\n            case \"active\":\n                newTasks = tasks.filter(t => t.status === TaskStatuses.New)\n                return newTasks\n            case \"completed\":\n                newTasks = tasks.filter(t => t.status === TaskStatuses.Completed)\n                return newTasks\n            default:\n                return tasks\n        }\n    }\n    const tasksComponents = getTasksForRender(tasks, todolist.filter).map(item => {\n        return (\n            <Task\n                todolistId={todoListId}\n                key={item.id}\n                id={item.id}/>)\n    });\n    return (\n        <div className={\"todolist\"}>\n            <TodoListHeader\n                title={todolist.title}\n                removeTodoList={removeTodolist}\n                changeTitle={setTitleValue}\n                entityStatus={todolist.entityStatus}\n            />\n            <AddItemForm\n                disabled={todolist.entityStatus === \"loading\"}\n                addItem={addNewTask}\n                label={\"Add a task\"}/>\n            <List>\n                {tasksComponents}\n            </List>\n            <ButtonGroup\n                color={\"primary\"}\n                size={\"small\"}\n                className={\"buttonGroup\"}\n                fullWidth\n                style={{marginTop: \"10px\"}}>\n                <Button\n                    variant={todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"all\")}>all</Button>\n                <Button\n                    variant={todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"active\")}>active</Button>\n                <Button\n                    variant={todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    onClick={setFilterValue(\"completed\")}>done</Button>\n            </ButtonGroup>\n        </div>\n    );\n});\n\ntype TodoListPropsType = {\n    todoListId: string\n}\n","import Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport React, {useCallback, useEffect} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {addTodolistTC, fetchTodolistsTC, TodolistDomainType} from \"../../state/todolists-reducer\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {TodoList} from \"../../components/TodoList/TodoList\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Todolists = () => {\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        if (!isLoggedIn) {\n            return\n        }\n        dispatch(fetchTodolistsTC())\n    }, [dispatch, isLoggedIn])\n\n    const addTodoList = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const todoListsComponents = todoLists.map(tl => {\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={3}>\n                    <TodoList todoListId={tl.id}/>\n                </Paper>\n            </Grid>\n        )\n    })\n\n    if(!isLoggedIn) {\n        return  <Navigate to={'/todos/login'}/>\n    }\n    return (\n        <Container fixed>\n            <Grid container style={{padding: \"25px 0\"}}>\n                <AddItemForm\n                    addItem={addTodoList}\n                    label={\"Create a new todo\"}\n                />\n            </Grid>\n            <Grid container spacing={4}>\n                {todoListsComponents}\n            </Grid>\n        </Container>\n    )\n}\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"../../state/auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: values => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Must be 3 characters or more';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/todos'}/>\n    }\n\n    return (\n        <Grid container justifyContent={'center'}>\n            <Grid item justifyContent={'center'}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'} rel=\"noreferrer\"> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <form onSubmit={formik.handleSubmit}>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            {formik.touched.email && formik.errors.email &&\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                            <TextField\n                                type=\"password\"\n                                label=\"Password\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('password')}\n                            />\n                            {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            <FormControlLabel\n                                label={'Remember me'}\n                                control={<Checkbox\n                                    checked={formik.values.rememberMe}\n                                    {...formik.getFieldProps('rememberMe')}/>}\n                            />\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\n                                Login\n                            </Button>\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </Grid>\n        </Grid>\n    )\n}\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorShackbar\";\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./state/app-reduser\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {Todolists} from \"./pages/Todolists/Todolists\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\"\r\nimport {Login} from \"./pages/Login/Login\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport const App = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType >(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect((() => {\r\n        dispatch(initializeAppTC())\r\n    }), [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            { status === 'loading' && <LinearProgress color=\"secondary\"/> }\r\n            <Routes>\r\n                <Route path=\"/todos\" element={<Todolists/>} />\r\n                <Route path=\"/todos/login\" element={<Login/>} />\r\n                <Route path=\"/todos/notfound\" element={<h1 style={{textAlign: 'center'}}>404. Page not found</h1>} />\r\n                <Route path=\"*\" element={<Navigate to=\"/todos/notfound\"/>} />\r\n            </Routes>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {ActionTypeTask, tasksReducer} from './tasks-reducer';\nimport {ActionTypeTodolist, todolistsReducer} from './todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {ActionsTypeApp, appReducer} from \"./app-reduser\";\nimport {ActionTypeAuth, authReducer} from \"./auth-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n\nexport type ActionType = ActionTypeTodolist | ActionTypeTask | ActionsTypeApp | ActionTypeAuth\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    AppRootStateType,\n    unknown,\n    ActionType\n    >\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./App\";\r\nimport {store} from \"./state/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}